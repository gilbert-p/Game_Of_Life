{"version":3,"sources":["logo.svg","Menu.js","Board.js","GameOfLife.js","GameOfLifeProvider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","props","randomizeGrid","clearGrid","togglePlay","checkIfRunning","useState","playToggle","setPlayToggle","className","onClick","class","Cell","alive","flipState","newBorn","Board","gridWidth","gridHeight","cellGrid","setGrid","generationCount","setGenerationCount","isRunning","setIsRunning","delay","useEffect","grid","rowIndex","row","colIndex","cellState","Math","random","push","status","calculateNeighbors","currentGrid","ii","jj","topRow","bottomRow","leftColumn","rightColumn","total","updateGrid","previousGridState","slice","currentNeighborTotal","newGrid","newRow","callback","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","map","tableRow","row_index","key","tableCell","cell_index","x","y","updatedGrid","currentCell","length","GameOfLife","React","createContext","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,gJCgC5BC,EA9BF,SAACC,GAAW,IACfC,EAAyDD,EAAzDC,cAAeC,EAA0CF,EAA1CE,UAAWC,EAA+BH,EAA/BG,WAAYC,EAAmBJ,EAAnBI,eADxB,EAGcC,mBAASD,GAHvB,mBAGfE,EAHe,KAGHC,EAHG,KAStB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,qBAAqBC,QAASR,GAC3C,uBAAGS,MAAM,uBACT,yCAEF,yBAAKF,UAAU,iBAAiBC,QAASP,GACvC,uBAAGQ,MAAM,YACT,qCAEF,yBAAKF,UAAU,uBAAuBC,QAfrB,WACnBF,GAAeD,GACfH,MAcKG,EACC,uBAAGI,MAAM,oBAET,uBAAGA,MAAM,wBCtBbC,EAAO,SAACX,GAAW,IACfY,EAA8BZ,EAA9BY,MAAOC,EAAuBb,EAAvBa,UAAWC,EAAYd,EAAZc,QAC1B,OACE,wBACEN,UAAS,UAAKM,EAAU,UAAY,GAA3B,YAAiCF,EAAQ,QAAU,IAC5DH,QAASI,KAoNAE,EAhND,WAAO,IAAD,EACgBV,mBAAS,IADzB,mBACXW,EADW,aAEkBX,mBAAS,KAF3B,mBAEXY,EAFW,aAGUZ,mBAAS,KAHnB,mBAGXa,EAHW,KAGDC,EAHC,OAI4Bd,mBAAS,GAJrC,mBAIXe,EAJW,KAIMC,EAJN,OAKgBhB,oBAAS,GALzB,mBAKXiB,EALW,KAKAC,EALA,OAMQlB,mBAAS,KANjB,mBAMXmB,EANW,UAwBlBC,qBAAU,WACRxB,MACC,IAEH,IAAMA,EAAgB,WAGpB,IAFA,IAAIyB,EAAO,GAEFC,EAAW,EAAGA,EAAWV,EAAYU,IAAY,CAExD,IADA,IAAIC,EAAM,GACDC,EAAW,EAAGA,EAAWb,EAAWa,IAAY,CACvD,IAAIC,EAAYC,KAAKC,SAAW,GAC3BF,EAKHF,EAAIK,KAAK,CACPC,OAAQJ,EACRhB,SAAS,IANXc,EAAIK,KAAK,CACPC,OAAQJ,IASdJ,EAAKO,KAAKL,GAEZT,EAAQO,IA8BJS,EAAqB,SAACC,EAAaC,EAAIC,GAE3C,IAAIC,EAASF,EAAK,EAAI,EAAIpB,EAAa,EAAIoB,EAAK,EAC5CG,EAAYH,EAAK,GAAKpB,EAAa,EAAIoB,EAAK,EAC5CI,EAAaH,EAAK,EAAI,EAAItB,EAAY,EAAIsB,EAAK,EAC/CI,EAAcJ,EAAK,GAAKtB,EAAY,EAAIsB,EAAK,EAE7CK,EAAQ,EAWZ,OATAA,GAASP,EAAYG,GAAQE,GAAYP,OAAS,EAAI,EACtDS,GAASP,EAAYG,GAAQD,GAAIJ,OAAS,EAAI,EAC9CS,GAASP,EAAYG,GAAQG,GAAaR,OAAS,EAAI,EACvDS,GAASP,EAAYC,GAAII,GAAYP,OAAS,EAAI,EAClDS,GAASP,EAAYC,GAAIK,GAAaR,OAAS,EAAI,EACnDS,GAASP,EAAYI,GAAWC,GAAYP,OAAS,EAAI,EACzDS,GAASP,EAAYI,GAAWF,GAAIJ,OAAS,EAAI,EACjDS,GAASP,EAAYI,GAAWE,GAAaR,OAAS,EAAI,GAKtDU,EAAa,WAKjB,IAJA,IAAIC,EAAoB3B,EAAS4B,QAC7BC,EAAuB,EACvBC,EAAU,GAELrB,EAAW,EAAGA,EAAWV,EAAYU,IAAY,CAExD,IADA,IAAIsB,EAAS,GACJpB,EAAW,EAAGA,EAAWb,EAAWa,IAAY,CACvDkB,EAAuBZ,EACrBU,EACAlB,EACAE,GAEgBgB,EAAkBlB,GAAUE,GAE7BK,OAMNa,EAAuB,GAEvBA,EAAuB,EADhCE,EAAOhB,KAAK,CAAEC,QAAQ,IAItBe,EAAOhB,KAAK,CAAEC,QAAQ,IAVM,GAAxBa,EACFE,EAAOhB,KAAK,CAAEC,QAAQ,EAAMpB,SAAS,IAErCmC,EAAOhB,KAAK,CAAEC,QAAQ,IAU5Bc,EAAQf,KAAKgB,GAEf9B,EAAQ6B,GACR3B,EAAmBD,EAAkB,IAyCvC,OA/BoB,SAAC8B,EAAU1B,GAC7B,IAAM2B,EAAgBC,mBAEtB3B,qBAAU,WACR0B,EAAcE,QAAUH,IACvB,CAACA,IAEJzB,qBAAU,WAKR,GAAc,OAAVD,EAAgB,CAClB,IAAI8B,EAAKC,aALX,WACEJ,EAAcE,YAIa7B,GAC3B,OAAO,kBAAMgC,cAAcF,OAE5B,CAAC9B,IAQNiC,EACE,WACEb,MAEFtB,EAAYE,EAAQ,MAIpB,oCACE,yBAAKhB,UAAU,aACb,2BAAO8C,GAAG,cACR,+BACGpC,EAASwC,KAAI,SAACC,EAAUC,GACvB,OACE,wBAAIC,IAAKD,GACND,EAASD,KAAI,SAACI,EAAWC,GACxB,OACE,kBAAC,EAAD,CACEF,IAAKE,EACLlD,UAAW,YApHf,SAACmD,EAAGC,GACpB,IAAIC,EAAchD,EAAS4B,QACvBqB,EAAcD,EAAYD,GAAGD,GAC5BG,EAAYjC,SACfiC,EAAYrD,SAAU,GAExBqD,EAAYjC,QAAUiC,EAAYjC,OAClCf,EAAQ+C,GA8GcrD,CAAUkD,EAAYH,IAExBhD,MAAOkD,EAAU5B,OACjBpB,QAASgD,EAAUhD,oBASrC,kBAAC,EAAD,CACEb,cAAeA,EACfC,UApJY,WAChBqB,GAAa,GAIb,IAFA,IAAIG,EAAO,GAEFC,EAAW,EAAGA,EAAWV,EAAYU,IAAY,CAExD,IADA,IAAIC,EAAM,GACDC,EAAW,EAAGA,EAAWb,EAAWa,IAC3CD,EAAIK,KAAK,CACPC,QAAQ,IAGZR,EAAKO,KAAKL,GAEZT,EAAQO,IAuIJvB,WAlEa,WACbe,EAASkD,QAAU,GAGrB7C,GAAcD,IA+DZsB,WAAYA,EACZxC,eA1CiB,WAErB,OADAmB,EAAaD,GACNA,OC7JI+C,GCfWC,IAAMC,gBDEb,WAKjB,OACE,yBAAK/D,UAAU,kBACb,wBAAIA,UAAU,aAAd,oCACA,kBAAC,EAAD,S,OEISgE,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.827da84c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\n\r\nconst Menu = (props) => {\r\n  const { randomizeGrid, clearGrid, togglePlay, checkIfRunning } = props;\r\n\r\n  const [playToggle, setPlayToggle] = useState(checkIfRunning);\r\n  const changeButton = () => {\r\n    setPlayToggle(!playToggle);\r\n    togglePlay();\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-menu\">\r\n      <div className=\"menu-btn randomize\" onClick={randomizeGrid}>\r\n        <i class=\"gg-arrows-exchange\"></i>\r\n        <p>Randomize</p>\r\n      </div>\r\n      <div className=\"menu-btn clear\" onClick={clearGrid}>\r\n        <i class=\"gg-redo\"></i>\r\n        <p>Clear</p>\r\n      </div>\r\n      <div className=\" menu-btn togglePlay\" onClick={changeButton}>\r\n        {playToggle ? (\r\n          <i class=\"gg-play-pause-r\"></i>\r\n        ) : (\r\n          <i class=\"gg-play-button-o\"></i>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Menu from \"./Menu\";\r\n\r\nconst Cell = (props) => {\r\n  const { alive, flipState, newBorn } = props;\r\n  return (\r\n    <td\r\n      className={`${newBorn ? \"newBorn\" : \"\"} ${alive ? \"alive\" : \"\"}`}\r\n      onClick={flipState}></td>\r\n  );\r\n};\r\n\r\nconst Board = () => {\r\n  const [gridWidth, setGridWidth] = useState(40);\r\n  const [gridHeight, setGridHeight] = useState(25);\r\n  const [cellGrid, setGrid] = useState([]);\r\n  const [generationCount, setGenerationCount] = useState(0);\r\n  const [isRunning, setIsRunning] = useState(true);\r\n  const [delay, setDelay] = useState(100);\r\n\r\n  const initializeGrid = () => {\r\n    let grid = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < gridHeight; rowIndex++) {\r\n      let row = [];\r\n      for (let colIndex = 0; colIndex < gridWidth; colIndex++) {\r\n        let value = false;\r\n        row.push({\r\n          status: value,\r\n        });\r\n      }\r\n      grid.push(row);\r\n    }\r\n    setGrid(grid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    randomizeGrid();\r\n  }, []);\r\n\r\n  const randomizeGrid = () => {\r\n    let grid = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < gridHeight; rowIndex++) {\r\n      let row = [];\r\n      for (let colIndex = 0; colIndex < gridWidth; colIndex++) {\r\n        let cellState = Math.random() > 0.8 ? true : false;\r\n        if (!cellState) {\r\n          row.push({\r\n            status: cellState,\r\n          });\r\n        } else {\r\n          row.push({\r\n            status: cellState,\r\n            newBorn: true,\r\n          });\r\n        }\r\n      }\r\n      grid.push(row);\r\n    }\r\n    setGrid(grid);\r\n  };\r\n\r\n  const clearGrid = () => {\r\n    setIsRunning(false);\r\n\r\n    let grid = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < gridHeight; rowIndex++) {\r\n      let row = [];\r\n      for (let colIndex = 0; colIndex < gridWidth; colIndex++) {\r\n        row.push({\r\n          status: false,\r\n        });\r\n      }\r\n      grid.push(row);\r\n    }\r\n    setGrid(grid);\r\n  };\r\n\r\n  const flipState = (x, y) => {\r\n    let updatedGrid = cellGrid.slice();\r\n    let currentCell = updatedGrid[y][x];\r\n    if (!currentCell.status) {\r\n      currentCell.newBorn = true;\r\n    }\r\n    currentCell.status = !currentCell.status;\r\n    setGrid(updatedGrid);\r\n  };\r\n\r\n  const calculateNeighbors = (currentGrid, ii, jj) => {\r\n    //Rules for Torodial World\r\n    let topRow = ii - 1 < 0 ? gridHeight - 1 : ii - 1;\r\n    let bottomRow = ii + 1 >= gridHeight ? 0 : ii + 1;\r\n    let leftColumn = jj - 1 < 0 ? gridWidth - 1 : jj - 1;\r\n    let rightColumn = jj + 1 >= gridWidth ? 0 : jj + 1;\r\n\r\n    let total = 0;\r\n\r\n    total += currentGrid[topRow][leftColumn].status ? 1 : 0;\r\n    total += currentGrid[topRow][jj].status ? 1 : 0;\r\n    total += currentGrid[topRow][rightColumn].status ? 1 : 0;\r\n    total += currentGrid[ii][leftColumn].status ? 1 : 0;\r\n    total += currentGrid[ii][rightColumn].status ? 1 : 0;\r\n    total += currentGrid[bottomRow][leftColumn].status ? 1 : 0;\r\n    total += currentGrid[bottomRow][jj].status ? 1 : 0;\r\n    total += currentGrid[bottomRow][rightColumn].status ? 1 : 0;\r\n\r\n    return total;\r\n  };\r\n\r\n  const updateGrid = () => {\r\n    let previousGridState = cellGrid.slice();\r\n    let currentNeighborTotal = 0;\r\n    let newGrid = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < gridHeight; rowIndex++) {\r\n      let newRow = [];\r\n      for (let colIndex = 0; colIndex < gridWidth; colIndex++) {\r\n        currentNeighborTotal = calculateNeighbors(\r\n          previousGridState,\r\n          rowIndex,\r\n          colIndex\r\n        );\r\n        let currentCell = previousGridState[rowIndex][colIndex];\r\n\r\n        if (!currentCell.status) {\r\n          if (currentNeighborTotal == 3) {\r\n            newRow.push({ status: true, newBorn: true });\r\n          } else {\r\n            newRow.push({ status: false });\r\n          }\r\n        } else if (currentNeighborTotal < 2) {\r\n          newRow.push({ status: false });\r\n        } else if (currentNeighborTotal > 3) {\r\n          newRow.push({ status: false });\r\n        } else {\r\n          newRow.push({ status: true });\r\n        }\r\n      }\r\n      newGrid.push(newRow);\r\n    }\r\n    setGrid(newGrid);\r\n    setGenerationCount(generationCount + 1);\r\n  };\r\n\r\n  const togglePlay = () => {\r\n    if (cellGrid.length <= 0) {\r\n      return;\r\n    } else {\r\n      setIsRunning(!isRunning);\r\n    }\r\n  };\r\n  const useInterval = (callback, delay) => {\r\n    const savedCallback = useRef();\r\n\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  };\r\n\r\n  const checkIfRunning = () => {\r\n    setIsRunning(isRunning);\r\n    return isRunning;\r\n  };\r\n\r\n  useInterval(\r\n    () => {\r\n      updateGrid();\r\n    },\r\n    isRunning ? delay : null\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"game-grid\">\r\n        <table id=\"grid-table\">\r\n          <tbody>\r\n            {cellGrid.map((tableRow, row_index) => {\r\n              return (\r\n                <tr key={row_index}>\r\n                  {tableRow.map((tableCell, cell_index) => {\r\n                    return (\r\n                      <Cell\r\n                        key={cell_index}\r\n                        flipState={() => {\r\n                          flipState(cell_index, row_index);\r\n                        }}\r\n                        alive={tableCell.status}\r\n                        newBorn={tableCell.newBorn}></Cell>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <Menu\r\n        randomizeGrid={randomizeGrid}\r\n        clearGrid={clearGrid}\r\n        togglePlay={togglePlay}\r\n        updateGrid={updateGrid}\r\n        checkIfRunning={checkIfRunning}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport { GameOfLifeProvider } from \"./GameOfLifeProvider\";\r\n\r\nconst GameOfLife = () => {\r\n  const playState = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <h1 className=\"gol-title\">Conway's Game of Life (React JS)</h1>\r\n      <Board></Board>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOfLife;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport const GOLContext = React.createContext();\r\n\r\nexport const GameOfLifeProvider = ({ children }) => {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  return (\r\n    <GOLContext.Provider value={{ isRunning }}>{children}</GOLContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport { motion } from \"framer-motion\";\nimport { Frame, Scroll, useCycle } from \"framer\";\nimport GameOfLife from \"./GameOfLife\";\nimport \"css.gg\";\n\nfunction App() {\n  return (\n    <>\n      <GameOfLife></GameOfLife>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}