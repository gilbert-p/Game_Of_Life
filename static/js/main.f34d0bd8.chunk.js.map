{"version":3,"sources":["logo.svg","Menu.js","GameOfLifeV2.js","custom_hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","props","togglePlay","resetGrid","useState","playToggle","setPlayToggle","className","onClick","class","Cell","key","newBorn","alive","row_index","cell_index","id","GameOfLifeV2","windowWidth","setWindowWidth","setCellCount","gridWidth","setGridWidth","gridHeight","setGridHeight","cellGrid","setGrid","isRunning","setIsRunning","delay","generationCount","setGenerationCount","useEffect","handleResize","window","innerWidth","addEventListener","removeEventListener","grid","rowIndex","row","colIndex","cellState","Math","random","push","status","randomizeGrid","calculateNeighbors","currentGrid","ii","jj","topRow","bottomRow","leftColumn","rightColumn","total","callback","savedCallback","useRef","current","setInterval","clearInterval","useInterval","previousGridState","slice","currentNeighborTotal","newGrid","newRow","updateGrid","map","tableRow","tableCell","length","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f34d0bd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState } from \"react\";\r\n\r\nconst Menu = (props) => {\r\n  const { togglePlay, resetGrid } = props;\r\n\r\n  const [playToggle, setPlayToggle] = useState(false);\r\n\r\n  const changeButton = () => {\r\n    setPlayToggle(!playToggle);\r\n    togglePlay();\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-menu\">\r\n      <div onClick={resetGrid} className=\"menu-btn clear\">\r\n        <i class=\"gg-redo\"></i>\r\n        <p>RESET</p>\r\n      </div>\r\n      <div className=\" menu-btn togglePlay\" onClick={changeButton}>\r\n        {playToggle ? (\r\n          <i class=\"gg-play-button-o\"></i>\r\n        ) : (\r\n          <i class=\"gg-play-pause-r\"></i>\r\n        )}\r\n        {playToggle ? <p>PLAY</p> : <p>PAUSE</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Menu from \"./Menu.js\";\r\nimport useInterval from \"./custom_hooks/useInterval\";\r\nimport \"./GOLv2.scss\";\r\nimport \"css.gg\";\r\n\r\nconst Cell = (props) => {\r\n  const { key, newBorn, alive, row_index, cell_index } = props;\r\n  return (\r\n    <div\r\n      key={`R${row_index}C${cell_index}`}\r\n      id={`R${row_index}C${cell_index}`}\r\n      className={`cell ${newBorn ? \"newBorn\" : \"\"} ${\r\n        alive ? \"alive\" : \"\"\r\n      }`}></div>\r\n  );\r\n};\r\n\r\nconst GameOfLifeV2 = () => {\r\n  const [windowWidth, setWindowWidth] = useState(null);\r\n  const [cellCount, setCellCount] = useState(null); //default for mobile\r\n  const [gridWidth, setGridWidth] = useState(null);\r\n  const [gridHeight, setGridHeight] = useState(null);\r\n  const [cellGrid, setGrid] = useState([]);\r\n  const [isRunning, setIsRunning] = useState(true);\r\n  const [delay, setDelay] = useState(100);\r\n  const [generationCount, setGenerationCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowWidth(window.innerWidth);\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      return () => {\r\n        window.removeEventListener(\"resize\", handleResize);\r\n      };\r\n    }\r\n    handleResize();\r\n\r\n    function determineCellCount() {\r\n      if (windowWidth !== null) {\r\n        if (windowWidth >= 1200) {\r\n          setCellCount(1608);\r\n          setGridWidth(67);\r\n          setGridHeight(24);\r\n        }\r\n        if (windowWidth >= 768 && windowWidth < 1200) {\r\n          setCellCount(1100);\r\n          setGridWidth(44);\r\n          setGridHeight(25);\r\n        }\r\n        if (windowWidth < 768) {\r\n          setCellCount(399);\r\n          setGridWidth(19);\r\n          setGridHeight(21);\r\n        }\r\n      }\r\n    }\r\n    determineCellCount();\r\n  }, [windowWidth]);\r\n\r\n  useEffect(() => {\r\n    function randomizeGrid() {\r\n      let grid = [];\r\n\r\n      if (gridWidth !== null) {\r\n        for (let rowIndex = 0; rowIndex < gridHeight; rowIndex++) {\r\n          let row = [];\r\n          for (let colIndex = 0; colIndex < gridWidth; colIndex++) {\r\n            let cellState = Math.random() > 0.8 ? true : false;\r\n            if (!cellState) {\r\n              row.push({\r\n                status: cellState,\r\n              });\r\n            } else {\r\n              row.push({\r\n                status: cellState,\r\n                newBorn: true,\r\n              });\r\n            }\r\n          }\r\n          grid.push(row);\r\n        }\r\n        setGrid(grid);\r\n      }\r\n    }\r\n\r\n    randomizeGrid();\r\n  }, [gridWidth]); //IMPORTANT! This function depends on gridwidth to render properly\r\n\r\n  const calculateNeighbors = (currentGrid, ii, jj) => {\r\n    //Rules for Torodial World\r\n    let topRow = ii - 1 < 0 ? gridHeight - 1 : ii - 1;\r\n    let bottomRow = ii + 1 >= gridHeight ? 0 : ii + 1;\r\n    let leftColumn = jj - 1 < 0 ? gridWidth - 1 : jj - 1;\r\n    let rightColumn = jj + 1 >= gridWidth ? 0 : jj + 1;\r\n\r\n    let total = 0;\r\n\r\n    total += currentGrid[topRow][leftColumn].status ? 1 : 0;\r\n    total += currentGrid[topRow][jj].status ? 1 : 0;\r\n    total += currentGrid[topRow][rightColumn].status ? 1 : 0;\r\n    total += currentGrid[ii][leftColumn].status ? 1 : 0;\r\n    total += currentGrid[ii][rightColumn].status ? 1 : 0;\r\n    total += currentGrid[bottomRow][leftColumn].status ? 1 : 0;\r\n    total += currentGrid[bottomRow][jj].status ? 1 : 0;\r\n    total += currentGrid[bottomRow][rightColumn].status ? 1 : 0;\r\n\r\n    return total;\r\n  };\r\n\r\n  const updateGrid = () => {\r\n    let previousGridState = cellGrid.slice();\r\n    let currentNeighborTotal = 0;\r\n    let newGrid = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < gridHeight; rowIndex++) {\r\n      let newRow = [];\r\n      for (let colIndex = 0; colIndex < gridWidth; colIndex++) {\r\n        currentNeighborTotal = calculateNeighbors(\r\n          previousGridState,\r\n          rowIndex,\r\n          colIndex\r\n        );\r\n        let currentCell = previousGridState[rowIndex][colIndex];\r\n\r\n        if (!currentCell.status) {\r\n          if (currentNeighborTotal == 3) {\r\n            newRow.push({ status: true, newBorn: true });\r\n          } else {\r\n            newRow.push({ status: false });\r\n          }\r\n        } else if (currentNeighborTotal < 2) {\r\n          newRow.push({ status: false });\r\n        } else if (currentNeighborTotal > 3) {\r\n          newRow.push({ status: false });\r\n        } else {\r\n          newRow.push({ status: true });\r\n        }\r\n      }\r\n      newGrid.push(newRow);\r\n    }\r\n    setGrid(newGrid);\r\n    setGenerationCount(generationCount + 1);\r\n  };\r\n\r\n  useInterval(\r\n    () => {\r\n      updateGrid();\r\n    },\r\n    isRunning ? delay : null\r\n  );\r\n\r\n  const checkIfRunning = () => {\r\n    setIsRunning(isRunning);\r\n    return isRunning;\r\n  };\r\n\r\n  const togglePlay = () => {\r\n    if (cellGrid.length <= 0) {\r\n      return;\r\n    } else {\r\n      setIsRunning(!isRunning);\r\n    }\r\n  };\r\n\r\n  function randomizeGrid() {\r\n    let grid = [];\r\n\r\n    if (gridWidth !== null) {\r\n      for (let rowIndex = 0; rowIndex < gridHeight; rowIndex++) {\r\n        let row = [];\r\n        for (let colIndex = 0; colIndex < gridWidth; colIndex++) {\r\n          let cellState = Math.random() > 0.8 ? true : false;\r\n          if (!cellState) {\r\n            row.push({\r\n              status: cellState,\r\n            });\r\n          } else {\r\n            row.push({\r\n              status: cellState,\r\n              newBorn: true,\r\n            });\r\n          }\r\n        }\r\n        grid.push(row);\r\n      }\r\n      setGrid(grid);\r\n    }\r\n  }\r\n  const resetGrid = () => {\r\n    setIsRunning(false);\r\n    setGrid([]);\r\n    randomizeGrid();\r\n    setIsRunning(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"gol-container\">\r\n        <h3 className=\"title\">Conway's Game Of Life</h3>\r\n        <div className=\"board\">\r\n          {windowWidth\r\n            ? cellGrid.map((tableRow, row_index) => {\r\n                return tableRow.map((tableCell, cell_index) => {\r\n                  return (\r\n                    <Cell\r\n                      row_index={row_index}\r\n                      cell_index={cell_index}\r\n                      alive={tableCell.status}\r\n                      newBorn={tableCell.newBorn}></Cell>\r\n                  );\r\n                });\r\n              })\r\n            : null}\r\n        </div>\r\n        <Menu resetGrid={resetGrid} togglePlay={togglePlay} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameOfLifeV2;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport default (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"./logo.svg\";\r\n// import \"./GOL.scss\";\r\n// import GameOfLife from \"./GameOfLife\";\r\nimport GameOfLifeV2 from \"./GameOfLifeV2\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GameOfLifeV2></GameOfLifeV2>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}